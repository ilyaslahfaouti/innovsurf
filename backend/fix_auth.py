#!/usr/bin/env python3
"""
Script de correction de l'authentification et test des APIs
Corrige le probl√®me d'authentification avec CustomUser
"""

import requests
import json
import time
from datetime import datetime

class FixedAPITester:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.access_token = None
        
        # Configuration des headers
        self.session.headers.update({
            'User-Agent': 'InnovSurf-Fixed-Tester/1.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        })
    
    def authenticate_with_email(self, email, password):
        """Authentification en utilisant l'email"""
        try:
            # Essayer d'abord avec email
            auth_url = f"{self.base_url}/api/token/"
            auth_data = {
                "email": email,
                "password": password
            }
            
            print(f"üîê Tentative d'authentification avec email: {email}")
            response = self.session.post(auth_url, json=auth_data)
            
            if response.status_code == 200:
                self.access_token = response.json().get('access')
                self.session.headers.update({
                    'Authorization': f'Bearer {self.access_token}'
                })
                print(f"‚úÖ Authentification r√©ussie avec email")
                return True
            else:
                print(f"‚ùå Authentification avec email √©chou√©e: {response.status_code}")
                print(f"   R√©ponse: {response.text}")
                
                # Essayer avec username (fallback)
                auth_data = {
                    "username": email,
                    "password": password
                }
                
                print(f"üîÑ Tentative avec username: {email}")
                response = self.session.post(auth_url, json=auth_data)
                
                if response.status_code == 200:
                    self.access_token = response.json().get('access')
                    self.session.headers.update({
                        'Authorization': f'Bearer {self.access_token}'
                    })
                    print(f"‚úÖ Authentification r√©ussie avec username")
                    return True
                else:
                    print(f"‚ùå Authentification avec username √©chou√©e: {response.status_code}")
                    print(f"   R√©ponse: {response.text}")
                    return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'authentification: {e}")
            return False
    
    def test_endpoint_with_auth(self, name, url, method="GET", data=None):
        """Tester un endpoint avec authentification"""
        full_url = f"{self.base_url}{url}"
        
        try:
            print(f"üîç Test de {name}...")
            
            if method == "GET":
                response = self.session.get(full_url)
            elif method == "POST":
                response = self.session.post(full_url, json=data)
            
            result = {
                "name": name,
                "url": full_url,
                "method": method,
                "status_code": response.status_code,
                "success": 200 <= response.status_code < 300,
                "response_time": response.elapsed.total_seconds(),
                "authenticated": bool(self.access_token)
            }
            
            # Analyser la r√©ponse
            try:
                if response.headers.get('content-type', '').startswith('application/json'):
                    result["data"] = response.json()
                    result["data_size"] = len(json.dumps(response.json()))
                else:
                    result["data"] = response.text[:200]
                    result["data_size"] = len(response.text)
            except:
                result["data"] = "Erreur de parsing"
                result["data_size"] = 0
            
            # Afficher le r√©sultat
            if result["success"]:
                icon = "‚úÖ"
                print(f"{icon} {name}: {response.status_code} ({result['response_time']:.2f}s)")
            else:
                icon = "‚ùå"
                error_msg = f"HTTP {response.status_code}"
                if response.status_code == 401:
                    error_msg = "Non autoris√©"
                elif response.status_code == 403:
                    error_msg = "Acc√®s interdit"
                elif response.status_code == 404:
                    error_msg = "Non trouv√©"
                elif response.status_code == 405:
                    error_msg = "M√©thode non autoris√©e"
                
                print(f"{icon} {name}: {error_msg} ({result['response_time']:.2f}s)")
            
            return result
            
        except Exception as e:
            error_result = {
                "name": name,
                "url": full_url,
                "method": method,
                "status_code": None,
                "success": False,
                "response_time": 0,
                "error": str(e),
                "authenticated": bool(self.access_token)
            }
            print(f"‚ùå {name}: Erreur - {e}")
            return error_result
    
    def run_fixed_tests(self):
        """Ex√©cuter les tests avec authentification corrig√©e"""
        print("üîß Tests des APIs avec Authentification Corrig√©e")
        print("=" * 60)
        
        # Authentification
        if not self.authenticate_with_email("test@innovsurf.com", "testpass123"):
            print("‚ùå Impossible de s'authentifier")
            return
        
        print(f"\nüîë Token d'acc√®s obtenu: {self.access_token[:20]}...")
        
        # Tests des endpoints prot√©g√©s
        print("\nüîê Tests des endpoints avec authentification:")
        protected_endpoints = [
            ("Profil club", "/api/surf-club/profile/"),
            ("Moniteurs", "/api/surf-club/monitors/"),
            ("√âquipements", "/api/surf-club/equipments/"),
            ("Horaires le√ßons", "/api/surf-club/lesson-schedules/"),
            ("Le√ßons surf", "/api/surf-club/surf-lessons/"),
            ("Sessions surf", "/api/surf-club/surf-sessions/"),
            ("Commandes", "/api/surf-club/orders/"),
            ("Statistiques", "/api/surf-club/statistics/"),
            ("Profil surfeur", "/api/surfer/profile/"),
        ]
        
        results = []
        for name, url in protected_endpoints:
            result = self.test_endpoint_with_auth(name, url)
            results.append(result)
            time.sleep(0.2)
        
        # Tests des endpoints publics
        print("\nüåê Tests des endpoints publics:")
        public_endpoints = [
            ("Spots de surf", "/api/surf-spots/"),
            ("D√©tail spot", "/api/surf-spots/1/"),
            ("Pr√©visions", "/api/surf-spots/prevision/1/"),
            ("Contact", "/api/contact/"),
        ]
        
        for name, url in public_endpoints:
            result = self.test_endpoint_with_auth(name, url)
            results.append(result)
            time.sleep(0.2)
        
        # Tests des endpoints sp√©ciaux
        print("\nü§ñ Tests des endpoints sp√©ciaux:")
        special_endpoints = [
            ("Chatbot", "/api/chatbot/"),
            ("Chatbot FAQ", "/api/chatbot/faq/"),
            ("Chatbot Analytics", "/api/chatbot/analytics/"),
            ("Windy Forecast", "/api/windy/forecast/"),
            ("Windy Optimal Times", "/api/windy/optimal-times/"),
            ("Windy Conditions", "/api/windy/conditions-summary/"),
            ("IA Forecast", "/api/ai/demand-forecast/"),
        ]
        
        for name, url in special_endpoints:
            result = self.test_endpoint_with_auth(name, url)
            results.append(result)
            time.sleep(0.2)
        
        # Tests POST
        print("\nüìù Tests des endpoints POST:")
        post_tests = [
            ("Ajouter moniteur", "/api/surf-club/add-monitor/", {
                "first_name": "Test",
                "last_name": "Monitor",
                "birthday": "1985-01-01",
                "active": True
            }),
            ("Ajouter √©quipement", "/api/surf-club/add-equipment/", {
                "name": "Test Board",
                "description": "Test Description",
                "size": "6'0",
                "state": "good",
                "material_type": "rent",
                "equipment_type_id": 1,
                "surf_club_id": 1,
                "rent_price": 50.0,
                "quantity": 1
            }),
        ]
        
        for name, url, data in post_tests:
            result = self.test_endpoint_with_auth(name, url, "POST", data)
            results.append(result)
            time.sleep(0.2)
        
        # R√©sum√©
        self.print_summary(results)
        
        return results
    
    def print_summary(self, results):
        """Afficher un r√©sum√© des r√©sultats"""
        print("\n" + "=" * 50)
        print("üìä R√âSUM√â DES TESTS CORRIG√âS")
        print("=" * 50)
        
        total = len(results)
        success = sum(1 for r in results if r["success"])
        failed = total - success
        authenticated = sum(1 for r in results if r.get("authenticated"))
        
        print(f"Total des tests: {total}")
        print(f"Tests r√©ussis: {success} ‚úÖ")
        print(f"Tests √©chou√©s: {failed} ‚ùå")
        print(f"Tests authentifi√©s: {authenticated} üîê")
        print(f"Taux de succ√®s: {(success/total)*100:.1f}%")
        
        if success > failed:
            print(f"\nüéâ Excellent ! La plupart des APIs fonctionnent")
        elif success == failed:
            print(f"\n‚ö†Ô∏è  R√©sultats mitig√©s, quelques APIs n√©cessitent une configuration")
        else:
            print(f"\n‚ùå Beaucoup d'APIs √©chouent, v√©rifiez la configuration")

def main():
    """Fonction principale"""
    print("üîß Testeur d'APIs avec Authentification Corrig√©e")
    print("=" * 60)
    
    # V√©rifier le serveur
    try:
        response = requests.get("http://localhost:8000/api/", timeout=5)
        print("‚úÖ Serveur accessible")
    except:
        print("‚ùå Serveur non accessible")
        print("D√©marrez votre serveur Django d'abord")
        return
    
    # Cr√©er et ex√©cuter le testeur
    tester = FixedAPITester()
    results = tester.run_fixed_tests()
    
    print("\nüéâ Tests termin√©s !")
    print("Consultez les r√©sultats ci-dessus pour l'√©tat de vos APIs")

if __name__ == "__main__":
    main()

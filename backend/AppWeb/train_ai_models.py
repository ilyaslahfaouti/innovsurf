# train_ai_models.py
"""
Script d'entra√Ænement et de test des mod√®les IA pour YalaSurf
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'innovsurf.settings')
django.setup()

from AppWeb.surf_prediction_model import surf_prediction_model
from AppWeb.recommendation_system import recommendation_system
from AppWeb.booking_prediction import booking_prediction_system
from AppWeb.analytics_dashboard import analytics_dashboard

def train_all_models():
    """
    Entra√Æne tous les mod√®les IA
    """
    print("üöÄ D√©marrage de l'entra√Ænement des mod√®les IA...")
    
    # 1. Mod√®le de pr√©diction des conditions de surf
    print("\nüìä Entra√Ænement du mod√®le de pr√©diction des conditions de surf...")
    try:
        # G√©n√©rer des donn√©es d'exemple
        sample_data = surf_prediction_model.generate_sample_data(1000)
        
        # Entra√Æner le mod√®le
        result = surf_prediction_model.train_model(sample_data, 'random_forest')
        
        if result['success']:
            print(f"‚úÖ Mod√®le entra√Æn√© avec succ√®s!")
            print(f"   R¬≤ Score: {result['metrics']['r2']:.3f}")
            print(f"   RMSE: {result['metrics']['rmse']:.3f}")
        else:
            print(f"‚ùå Erreur: {result['error']}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
    
    # 2. Syst√®me de recommandation
    print("\nüéØ Initialisation du syst√®me de recommandation...")
    try:
        recommendation_system.initialize_system()
        if recommendation_system.is_initialized:
            print("‚úÖ Syst√®me de recommandation initialis√©!")
        else:
            print("‚ùå √âchec de l'initialisation")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 3. Syst√®me de pr√©diction des r√©servations
    print("\nüìà Entra√Ænement du syst√®me de pr√©diction des r√©servations...")
    try:
        # G√©n√©rer des donn√©es historiques
        historical_data = booking_prediction_system.generate_historical_booking_data(1000)
        
        # Entra√Æner le mod√®le de demande
        demand_result = booking_prediction_system.train_demand_prediction_model(historical_data, 'random_forest')
        if demand_result['success']:
            print(f"‚úÖ Mod√®le de demande entra√Æn√© (R¬≤: {demand_result['metrics']['r2']:.3f})")
        
        # Entra√Æner le mod√®le d'optimisation des prix
        price_result = booking_prediction_system.train_price_optimization_model(historical_data, 'random_forest')
        if price_result['success']:
            print(f"‚úÖ Mod√®le de prix entra√Æn√© (R¬≤: {price_result['metrics']['r2']:.3f})")
        
        # Entra√Æner le mod√®le de pr√©diction d'annulation
        cancellation_result = booking_prediction_system.train_cancellation_prediction_model(historical_data, 'random_forest')
        if cancellation_result['success']:
            print(f"‚úÖ Mod√®le d'annulation entra√Æn√©")
        
        # Sauvegarder tous les mod√®les
        booking_prediction_system.save_models()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 4. Dashboard analytics
    print("\nüìä Initialisation du dashboard analytics...")
    try:
        analytics_dashboard.initialize_dashboard()
        if analytics_dashboard.is_initialized:
            print("‚úÖ Dashboard analytics initialis√©!")
        else:
            print("‚ùå √âchec de l'initialisation")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print("\nüéâ Entra√Ænement termin√©!")

def test_all_models():
    """
    Teste tous les mod√®les entra√Æn√©s
    """
    print("\nüß™ Test des mod√®les IA...")
    
    # 1. Test du mod√®le de pr√©diction des conditions
    print("\nüìä Test du mod√®le de pr√©diction des conditions...")
    try:
        test_weather = {
            'wave_height': 2.0,
            'wind_speed': 12,
            'wind_direction': 180,
            'water_temp': 22,
            'tide': 0.5,
            'pressure': 1013,
            'precipitation': 0,
            'spot_name': 'Taghazout',
            'surfer_level': 'intermediate'
        }
        
        prediction = surf_prediction_model.predict_surf_conditions(test_weather)
        if prediction['success']:
            print(f"‚úÖ Pr√©diction: Score {prediction['predicted_score']}/10")
            print(f"   Interpr√©tation: {prediction['interpretation']}")
            print(f"   Confiance: {prediction['confidence']}")
        else:
            print(f"‚ùå Erreur: {prediction['error']}")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 2. Test du syst√®me de recommandation
    print("\nüéØ Test du syst√®me de recommandation...")
    try:
        user_preferences = {
            'surf_level': 'intermediate',
            'preferred_location': 'Taghazout',
            'preferred_wave_type': 'right',
            'crowd_preference': 'medium'
        }
        
        spot_recommendations = recommendation_system.recommend_spots(user_preferences, 3)
        if spot_recommendations:
            print(f"‚úÖ {len(spot_recommendations)} spots recommand√©s")
            for spot in spot_recommendations[:2]:
                print(f"   - {spot['name']} (Score: {spot['recommendation_score']})")
        else:
            print("‚ùå Aucune recommandation g√©n√©r√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 3. Test du syst√®me de pr√©diction des r√©servations
    print("\nüìà Test du syst√®me de pr√©diction des r√©servations...")
    try:
        future_date = datetime.now() + timedelta(days=7)
        weather_forecast = {
            'wave_height': 1.8,
            'wind_speed': 15,
            'water_temp': 23
        }
        
        # Pr√©diction de demande
        demand_prediction = booking_prediction_system.predict_demand(future_date, weather_forecast)
        if demand_prediction['success']:
            print(f"‚úÖ Demande pr√©dite: {demand_prediction['demand_level']}")
        
        # Optimisation des prix
        price_optimization = booking_prediction_system.optimize_price(future_date, weather_forecast, 100)
        if price_optimization['success']:
            print(f"‚úÖ Prix optimis√©: {price_optimization['optimized_price']}‚Ç¨ (Base: {price_optimization['base_price']}‚Ç¨)")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print("\n‚úÖ Tests termin√©s!")

def generate_sample_analytics():
    """
    G√©n√®re des analytics d'exemple
    """
    print("\nüìä G√©n√©ration d'analytics d'exemple...")
    
    try:
        # Analytics m√©t√©o
        weather_analytics = analytics_dashboard.generate_weather_analytics('Taghazout', 7)
        if weather_analytics['success']:
            print("‚úÖ Analytics m√©t√©o g√©n√©r√©s")
            print(f"   R√©sum√©: {len(weather_analytics['charts'])} graphiques cr√©√©s")
            
            # Afficher les statistiques
            summary = weather_analytics['summary_stats']
            if 'vagues' in summary:
                print(f"   Vagues moyennes: {summary['vagues']['moyenne']}m")
                print(f"   Vent moyen: {summary['vent']['moyenne']} km/h")
        else:
            print(f"‚ùå Erreur analytics: {weather_analytics['error']}")
        
        # M√©triques IA
        ai_metrics = analytics_dashboard.generate_ai_performance_metrics()
        if ai_metrics['success']:
            print("‚úÖ M√©triques IA g√©n√©r√©es")
            performance = ai_metrics['metrics']['overall_performance']
            print(f"   Performance globale: {performance['score']}% ({performance['level']})")
        else:
            print(f"‚ùå Erreur m√©triques: {ai_metrics['error']}")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print("\n‚úÖ Analytics g√©n√©r√©s!")

def main():
    """
    Fonction principale
    """
    print("ü§ñ YalaSurf - Entra√Ænement des Mod√®les IA")
    print("=" * 50)
    
    # V√©rifier que Django est configur√©
    try:
        from django.conf import settings
        print(f"‚úÖ Django configur√©: {settings.DEBUG}")
    except Exception as e:
        print(f"‚ùå Erreur Django: {e}")
        return
    
    # Menu principal
    while True:
        print("\nOptions disponibles:")
        print("1. Entra√Æner tous les mod√®les")
        print("2. Tester les mod√®les")
        print("3. G√©n√©rer des analytics")
        print("4. Tout faire")
        print("5. Quitter")
        
        choice = input("\nVotre choix (1-5): ").strip()
        
        if choice == '1':
            train_all_models()
        elif choice == '2':
            test_all_models()
        elif choice == '3':
            generate_sample_analytics()
        elif choice == '4':
            train_all_models()
            test_all_models()
            generate_sample_analytics()
        elif choice == '5':
            print("üëã Au revoir!")
            break
        else:
            print("‚ùå Choix invalide. Veuillez r√©essayer.")

if __name__ == "__main__":
    main()

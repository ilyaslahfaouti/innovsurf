#!/usr/bin/env python3
"""
Script de test simplifi√© pour le pipeline ETL de pr√©diction des r√©servations
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'innovsurf.settings')
django.setup()

from AppWeb.booking_prediction import BookingPredictionSystem

def test_simple_etl():
    """
    Test simple du pipeline ETL avec donn√©es simul√©es
    """
    print("üß™ TEST SIMPLIFI√â DU PIPELINE ETL")
    print("=" * 50)
    
    try:
        # Cr√©er une instance du syst√®me
        system = BookingPredictionSystem()
        
        # Test 1: G√©n√©ration de donn√©es historiques
        print("\nüìä 1. G√©n√©ration de donn√©es historiques...")
        historical_data = system.generate_historical_booking_data(500)
        print(f"‚úÖ {len(historical_data)} enregistrements g√©n√©r√©s")
        
        # Test 2: Chargement des donn√©es
        print("\nüì• 2. Chargement des donn√©es...")
        load_success = system.load_transformed_data(historical_data)
        print(f"‚úÖ Chargement: {'Succ√®s' if load_success else '√âchec'}")
        
        if not load_success:
            print("‚ùå √âchec du chargement des donn√©es")
            return False
        
        # Test 3: Entra√Ænement des mod√®les
        print("\nüß† 3. Entra√Ænement des mod√®les...")
        
        # Entra√Æner le mod√®le de demande
        print("   - Mod√®le de demande...")
        demand_result = system.train_demand_prediction_model(historical_data, 'random_forest')
        if demand_result['success']:
            print(f"   ‚úÖ Mod√®le de demande entra√Æn√© (R¬≤: {demand_result['metrics']['r2']:.3f})")
        else:
            print(f"   ‚ùå Erreur mod√®le de demande: {demand_result['error']}")
        
        # Entra√Æner le mod√®le de prix
        print("   - Mod√®le de prix...")
        price_result = system.train_price_optimization_model(historical_data, 'random_forest')
        if price_result['success']:
            print(f"   ‚úÖ Mod√®le de prix entra√Æn√© (R¬≤: {price_result['metrics']['r2']:.3f})")
        else:
            print(f"   ‚ùå Erreur mod√®le de prix: {price_result['error']}")
        
        # Entra√Æner le mod√®le d'annulation
        print("   - Mod√®le d'annulation...")
        cancellation_result = system.train_cancellation_prediction_model(historical_data, 'random_forest')
        if cancellation_result['success']:
            print("   ‚úÖ Mod√®le d'annulation entra√Æn√©")
        else:
            print(f"   ‚ùå Erreur mod√®le d'annulation: {cancellation_result['error']}")
        
        # Test 4: Pr√©dictions
        print("\nüîÆ 4. Test des pr√©dictions...")
        
        # Date future pour tester
        future_date = datetime.now() + timedelta(days=7)
        
        # Donn√©es m√©t√©o simul√©es
        weather_forecast = {
            'wave_height': 2.5,
            'wind_speed': 12,
            'water_temp': 24
        }
        
        # Pr√©dire la demande
        if system.demand_model:
            try:
                demand_prediction = system.predict_demand(future_date, weather_forecast, 'Taghazout')
                if demand_prediction['success']:
                    print(f"   üìà Demande pr√©dite: {demand_prediction['predicted_demand']:.2f} ({demand_prediction['demand_level']})")
                else:
                    print(f"   ‚ùå Erreur pr√©diction demande: {demand_prediction['error']}")
            except Exception as e:
                print(f"   ‚ùå Exception pr√©diction demande: {e}")
        
        # Optimiser le prix
        if system.price_optimization_model:
            try:
                price_optimization = system.optimize_price(future_date, weather_forecast, 100)
                if price_optimization['success']:
                    print(f"   üí∞ Prix optimis√©: {price_optimization['optimized_price']:.2f}‚Ç¨ (x{price_optimization['price_multiplier']:.2f})")
                else:
                    print(f"   ‚ùå Erreur optimisation prix: {price_optimization['error']}")
            except Exception as e:
                print(f"   ‚ùå Exception optimisation prix: {e}")
        
        # Pr√©dire l'annulation
        if system.cancellation_model:
            try:
                booking_data = {
                    'booking_date': future_date.isoformat(),
                    'wave_height': 2.5,
                    'wind_speed': 12,
                    'water_temp': 24,
                    'predicted_demand': 1.2,
                    'price_multiplier': 1.1
                }
                
                cancellation_prediction = system.predict_cancellation_probability(booking_data)
                if cancellation_prediction['success']:
                    print(f"   ‚ö†Ô∏è  Risque d'annulation: {cancellation_prediction['cancellation_probability']:.3f} ({cancellation_prediction['risk_level']})")
                else:
                    print(f"   ‚ùå Erreur pr√©diction annulation: {cancellation_prediction['error']}")
            except Exception as e:
                print(f"   ‚ùå Exception pr√©diction annulation: {e}")
        
        # Test 5: Sauvegarde des mod√®les
        print("\nüíæ 5. Sauvegarde des mod√®les...")
        try:
            system.save_models()
            print("‚úÖ Mod√®les sauvegard√©s avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")
        
        # Test 6: Statut du syst√®me
        print("\nüìä 6. Statut du syst√®me...")
        status = system.get_system_status()
        for key, value in status.items():
            print(f"   - {key}: {'‚úÖ' if value else '‚ùå'}")
        
        print("\nüéØ TOUS LES TESTS TERMIN√âS AVEC SUCC√àS!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_individual_components():
    """
    Test des composants individuels
    """
    print("\nüîß TEST DES COMPOSANTS INDIVIDUELS")
    print("=" * 40)
    
    try:
        system = BookingPredictionSystem()
        
        # Test de la g√©n√©ration de donn√©es
        print("\nüìä Test g√©n√©ration donn√©es...")
        data = system.generate_historical_booking_data(100)
        print(f"‚úÖ {len(data)} enregistrements g√©n√©r√©s")
        
        # Test de la transformation des donn√©es
        print("\nüîÑ Test transformation donn√©es...")
        # Simuler des donn√©es brutes
        raw_data = {
            'surf_lessons': [],
            'surf_sessions': [],
            'equipment_orders': []
        }
        transformed = system.transform_booking_data(raw_data)
        print(f"‚úÖ {len(transformed)} enregistrements transform√©s")
        
        # Test des utilitaires
        print("\nüõ†Ô∏è Test utilitaires...")
        
        # Test calcul score m√©t√©o
        weather_score = system._calculate_weather_score(2.0, 10, 22)
        print(f"‚úÖ Score m√©t√©o calcul√©: {weather_score}")
        
        # Test d√©termination saison
        season = system._get_season(7)
        print(f"‚úÖ Saison d√©termin√©e: {season}")
        
        # Test facteurs de demande
        factors = system._calculate_demand_factors(datetime.now(), {'weather_score': 8.0})
        print(f"‚úÖ Facteurs de demande: {factors}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur composants: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DES TESTS ETL SIMPLIFI√âS")
    print("=" * 60)
    
    # Test principal
    main_success = test_simple_etl()
    
    if main_success:
        # Test des composants
        test_individual_components()
    
    print("\nÔøΩÔøΩ Tests termin√©s!")

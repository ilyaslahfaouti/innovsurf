#!/usr/bin/env python
"""
Script de test du chatbot IA YalaSurf
Ce script teste toutes les fonctionnalit√©s du chatbot
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'innovsurf.settings')
django.setup()

from AppWeb.ai_services import chatbot_ai

def test_chatbot_functionality():
    """Teste toutes les fonctionnalit√©s du chatbot"""
    
    print("ü§ñ Test du Chatbot IA YalaSurf")
    print("=" * 50)
    
    # Tests de classification d'intention
    test_cases = [
        # Salutations
        ("Bonjour, comment allez-vous ?", "greeting"),
        ("Salut !", "greeting"),
        ("Hey there!", "greeting"),
        
        # Au revoir
        ("Au revoir", "farewell"),
        ("Bye bye", "farewell"),
        ("√Ä bient√¥t", "farewell"),
        
        # Spots de surf
        ("Quels sont les meilleurs spots ?", "surf_spots"),
        ("O√π puis-je surfer ?", "surf_spots"),
        ("Parlez-moi des vagues", "surf_spots"),
        
        # √âquipement
        ("Quel √©quipement me recommandez-vous ?", "equipment"),
        ("J'ai besoin d'une planche", "equipment"),
        ("O√π louer du mat√©riel ?", "equipment"),
        
        # Cours
        ("Comment prendre des cours ?", "lessons"),
        ("Je veux apprendre le surf", "lessons"),
        ("Quel est le prix des le√ßons ?", "lessons"),
        
        # Clubs
        ("Comment rejoindre un club ?", "surf_clubs"),
        ("Quels clubs recommandez-vous ?", "surf_clubs"),
        ("O√π sont les √©coles de surf ?", "surf_clubs"),
        
        # M√©t√©o
        ("Quelle est la m√©t√©o aujourd'hui ?", "weather"),
        ("Les conditions sont-elles bonnes ?", "weather"),
        ("Quand surfer ce weekend ?", "weather"),
        
        # Questions g√©n√©rales
        ("Comment √ßa marche ?", "general_question"),
        ("Que proposez-vous ?", "general_question"),
        ("Pouvez-vous m'aider ?", "general_question"),
    ]
    
    print("\nüìä Tests de Classification d'Intention")
    print("-" * 40)
    
    correct_classifications = 0
    total_tests = len(test_cases)
    
    for message, expected_intent in test_cases:
        result = chatbot_ai.process_message(message)
        actual_intent = result['intent']
        confidence = result['confidence']
        
        status = "‚úÖ" if actual_intent == expected_intent else "‚ùå"
        print(f"{status} Message: '{message[:30]}...'")
        print(f"   Attendu: {expected_intent}")
        print(f"   Obtenu:  {actual_intent}")
        print(f"   Confiance: {confidence:.2f}")
        print()
        
        if actual_intent == expected_intent:
            correct_classifications += 1
    
    accuracy = (correct_classifications / total_tests) * 100
    print(f"üìà Pr√©cision de classification: {accuracy:.1f}% ({correct_classifications}/{total_tests})")
    
    # Tests de g√©n√©ration de r√©ponses
    print("\nüí¨ Tests de G√©n√©ration de R√©ponses")
    print("-" * 40)
    
    response_tests = [
        "Bonjour",
        "Quels sont les meilleurs spots de surf ?",
        "Comment r√©server un cours ?",
        "Quel √©quipement pour d√©buter ?",
        "Quelle est la m√©t√©o ?",
        "Comment rejoindre un club ?"
    ]
    
    for message in response_tests:
        result = chatbot_ai.process_message(message)
        print(f"ü§î Question: {message}")
        print(f"ü§ñ R√©ponse: {result['response'][:100]}...")
        print(f"üéØ Intent: {result['intent']}")
        print(f"üìä Confiance: {result['confidence']:.2f}")
        print()
    
    # Tests des questions sugg√©r√©es
    print("\nüí° Tests des Questions Sugg√©r√©es")
    print("-" * 40)
    
    suggested_questions = chatbot_ai.get_suggested_questions()
    print(f"Nombre de questions sugg√©r√©es: {len(suggested_questions)}")
    for i, question in enumerate(suggested_questions, 1):
        print(f"{i}. {question}")
    
    # Tests de performance
    print("\n‚ö° Tests de Performance")
    print("-" * 40)
    
    import time
    
    # Test de temps de r√©ponse
    start_time = time.time()
    for _ in range(100):
        chatbot_ai.process_message("Bonjour")
    end_time = time.time()
    
    avg_response_time = (end_time - start_time) / 100 * 1000  # en millisecondes
    print(f"Temps de r√©ponse moyen: {avg_response_time:.2f}ms")
    
    # Test de charge
    print("\nüîÑ Test de Charge (1000 messages)")
    start_time = time.time()
    for i in range(1000):
        if i % 100 == 0:
            print(f"   Trait√© {i} messages...")
        chatbot_ai.process_message(f"Message test {i}")
    end_time = time.time()
    
    total_time = end_time - start_time
    messages_per_second = 1000 / total_time
    print(f"Temps total: {total_time:.2f}s")
    print(f"Messages par seconde: {messages_per_second:.1f}")
    
    print("\nüéâ Tests termin√©s !")
    print("=" * 50)

def test_faq_search():
    """Teste la recherche dans la FAQ"""
    
    print("\nüîç Test de Recherche FAQ")
    print("-" * 40)
    
    # Cr√©er quelques entr√©es de test
    from AppWeb.models import ChatbotFAQ
    
    # Supprimer les anciennes entr√©es de test
    ChatbotFAQ.objects.filter(question__startswith="TEST_").delete()
    
    # Cr√©er des entr√©es de test
    test_faqs = [
        {
            'question': 'TEST_Comment r√©server un cours ?',
            'answer': 'Pour r√©server, allez dans la section cours et choisissez votre cr√©neau.',
            'keywords': 'r√©server, cours, cr√©neau, r√©servation'
        },
        {
            'question': 'TEST_Quel √©quipement pour d√©buter ?',
            'answer': 'Nous recommandons une planche longue et une combinaison.',
            'keywords': '√©quipement, d√©butant, planche, combinaison'
        }
    ]
    
    for faq_data in test_faqs:
        ChatbotFAQ.objects.create(**faq_data)
    
    # Tests de recherche
    search_tests = [
        ("Comment r√©server ?", "TEST_Comment r√©server un cours ?"),
        ("J'ai besoin d'√©quipement", "TEST_Quel √©quipement pour d√©buter ?"),
        ("Je veux prendre des cours", "TEST_Comment r√©server un cours ?"),
        ("Quelle planche choisir ?", "TEST_Quel √©quipement pour d√©buter ?")
    ]
    
    for search_query, expected_question in search_tests:
        result = chatbot_ai.process_message(search_query)
        print(f"üîç Recherche: '{search_query}'")
        print(f"üìù R√©ponse: {result['response'][:80]}...")
        print()
    
    # Nettoyer les entr√©es de test
    ChatbotFAQ.objects.filter(question__startswith="TEST_").delete()

if __name__ == '__main__':
    try:
        test_chatbot_functionality()
        test_faq_search()
        print("\nüéØ Tous les tests ont √©t√© ex√©cut√©s avec succ√®s !")
        print("Le chatbot IA est pr√™t pour la production ! üöÄ")
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

#!/usr/bin/env python3
"""
Test sp√©cifique de l'API Forecast avec captures d'√©cran
Teste l'endpoint de pr√©visions m√©t√©orologiques
"""

import requests
import json
import time
import os
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

class ForecastAPITester:
    def __init__(self, base_url="http://localhost:8000", output_dir="forecast_screenshots"):
        self.base_url = base_url
        self.output_dir = output_dir
        self.session = requests.Session()
        self.access_token = None
        
        # Cr√©er le dossier de sortie
        os.makedirs(output_dir, exist_ok=True)
        
        # Configuration des headers
        self.session.headers.update({
            'User-Agent': 'InnovSurf-Forecast-Tester/1.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        })
    
    def authenticate(self, username="test@innovsurf.com", password="testpass123"):
        """Authentification pour obtenir un token"""
        try:
            auth_url = f"{self.base_url}/api/token/"
            auth_data = {
                "username": username,
                "password": password
            }
            
            response = self.session.post(auth_url, json=auth_data)
            
            if response.status_code == 200:
                self.access_token = response.json().get('access')
                self.session.headers.update({
                    'Authorization': f'Bearer {self.access_token}'
                })
                print(f"‚úÖ Authentification r√©ussie pour {username}")
                return True
            else:
                print(f"‚ùå √âchec de l'authentification: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'authentification: {e}")
            return False
    
    def get_surf_spots(self):
        """R√©cup√©rer la liste des spots de surf"""
        try:
            response = self.session.get(f"{self.base_url}/api/surf-spots/")
            if response.status_code == 200:
                spots = response.json()
                print(f"‚úÖ {len(spots)} spots de surf trouv√©s")
                return spots
            else:
                print(f"‚ùå Erreur lors de la r√©cup√©ration des spots: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            return []
    
    def test_forecast_endpoint(self, spot_id):
        """Tester l'endpoint de pr√©visions pour un spot sp√©cifique"""
        endpoint_url = f"/api/surf-spots/prevision/{spot_id}/"
        full_url = f"{self.base_url}{endpoint_url}"
        
        print(f"\nüîç Test de l'endpoint forecast pour le spot {spot_id}")
        print(f"URL: {full_url}")
        
        try:
            start_time = time.time()
            response = self.session.get(full_url)
            response_time = time.time() - start_time
            
            print(f"‚è±Ô∏è  Temps de r√©ponse: {response_time:.2f}s")
            print(f"üìä Statut HTTP: {response.status_code}")
            
            # Analyser la r√©ponse
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"‚úÖ Donn√©es re√ßues avec succ√®s")
                    
                    # Analyser la structure des donn√©es
                    self.analyze_forecast_data(data, spot_id)
                    
                    return {
                        "success": True,
                        "data": data,
                        "response_time": response_time,
                        "status_code": response.status_code
                    }
                    
                except json.JSONDecodeError:
                    print(f"‚ùå Erreur de d√©codage JSON")
                    return {
                        "success": False,
                        "error": "Erreur de d√©codage JSON",
                        "response_time": response_time,
                        "status_code": response.status_code
                    }
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"Message d'erreur: {error_data}")
                except:
                    print(f"Message d'erreur: {response.text}")
                
                return {
                    "success": False,
                    "error": f"Erreur HTTP {response.status_code}",
                    "response_time": response_time,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la requ√™te: {e}")
            return {
                "success": False,
                "error": str(e),
                "response_time": 0,
                "status_code": None
            }
    
    def analyze_forecast_data(self, data, spot_id):
        """Analyser la structure des donn√©es de pr√©visions"""
        print(f"\nüìã Analyse des donn√©es de pr√©visions pour le spot {spot_id}")
        
        # V√©rifier la structure g√©n√©rale
        if "forecast" in data:
            forecast = data["forecast"]
            print(f"‚úÖ Donn√©es de pr√©visions trouv√©es")
            
            # V√©rifier les m√©tadonn√©es
            if "meta" in forecast:
                meta = forecast["meta"]
                print(f"üìä M√©tadonn√©es:")
                print(f"   - Quota quotidien: {meta.get('dailyQuota', 'N/A')}")
                print(f"   - Requ√™tes utilis√©es: {meta.get('requestCount', 'N/A')}")
                print(f"   - Requ√™tes restantes: {meta.get('dailyQuota', 0) - meta.get('requestCount', 0)}")
            
            # V√©rifier les erreurs
            if "errors" in forecast:
                errors = forecast["errors"]
                print(f"‚ö†Ô∏è  Erreurs d√©tect√©es:")
                for key, value in errors.items():
                    print(f"   - {key}: {value}")
            
            # V√©rifier les donn√©es m√©t√©orologiques
            if "data" in forecast:
                weather_data = forecast["data"]
                print(f"üå§Ô∏è  Donn√©es m√©t√©orologiques:")
                
                for param_name, param_data in weather_data.items():
                    if isinstance(param_data, list):
                        print(f"   - {param_name}: {len(param_data)} points de donn√©es")
                        if param_data:
                            first_point = param_data[0]
                            print(f"     Premier point: {first_point}")
                    else:
                        print(f"   - {param_name}: {type(param_data)}")
            
            # V√©rifier le format alternatif
            elif "hours" in forecast:
                hours = forecast["hours"]
                print(f"‚è∞ Donn√©es par heure: {len(hours)} heures")
                if hours:
                    print(f"   Premier point: {hours[0]}")
        
        # Informations du spot
        if "name" in data:
            print(f"üèÑ Spot: {data['name']}")
        if "address" in data:
            print(f"üìç Adresse: {data['address']}")
        if "latitude" in data and "longitude" in data:
            print(f"üåç Coordonn√©es: {data['latitude']}, {data['longitude']}")
    
    def create_forecast_chart(self, data, spot_id):
        """Cr√©er un graphique des pr√©visions m√©t√©orologiques"""
        try:
            if "forecast" not in data or "data" not in data["forecast"]:
                print("‚ö†Ô∏è  Donn√©es insuffisantes pour cr√©er le graphique")
                return None
            
            forecast = data["forecast"]
            weather_data = forecast["data"]
            
            # Extraire les donn√©es de vagues
            if "waveHeight" in weather_data and weather_data["waveHeight"]:
                wave_data = weather_data["waveHeight"]
                
                # Pr√©parer les donn√©es pour le graphique
                times = []
                heights = []
                
                for point in wave_data:
                    if "time" in point and "waveHeight" in point:
                        time_str = point["time"]
                        height = point["waveHeight"].get("meteo") or point["waveHeight"].get("noaa")
                        
                        if height is not None:
                            times.append(datetime.fromisoformat(time_str.replace('Z', '+00:00')))
                            heights.append(height)
                
                if times and heights:
                    # Cr√©er le graphique
                    plt.figure(figsize=(12, 8))
                    
                    # Graphique principal des vagues
                    plt.subplot(2, 1, 1)
                    plt.plot(times, heights, 'b-', linewidth=2, marker='o')
                    plt.title(f'Pr√©visions de hauteur des vagues - Spot {spot_id}')
                    plt.ylabel('Hauteur des vagues (m)')
                    plt.grid(True, alpha=0.3)
                    
                    # Formater l'axe des temps
                    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                    plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=2))
                    plt.xticks(rotation=45)
                    
                    # Ajouter des informations sur le spot
                    if "name" in data:
                        plt.suptitle(f'Pr√©visions m√©t√©orologiques - {data["name"]}', fontsize=16)
                    
                    # Graphique de la temp√©rature de l'air si disponible
                    if "airTemperature" in weather_data and weather_data["airTemperature"]:
                        temp_data = weather_data["airTemperature"]
                        temp_times = []
                        temps = []
                        
                        for point in temp_data:
                            if "time" in point and "airTemperature" in point:
                                time_str = point["time"]
                                temp = point["airTemperature"].get("meteo") or point["airTemperature"].get("noaa")
                                
                                if temp is not None:
                                    temp_times.append(datetime.fromisoformat(time_str.replace('Z', '+00:00')))
                                    temps.append(temp)
                        
                        if temp_times and temps:
                            plt.subplot(2, 1, 2)
                            plt.plot(temp_times, temps, 'r-', linewidth=2, marker='s')
                            plt.title('Pr√©visions de temp√©rature de l\'air')
                            plt.ylabel('Temp√©rature (¬∞C)')
                            plt.xlabel('Heure')
                            plt.grid(True, alpha=0.3)
                            
                            # Formater l'axe des temps
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                            plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=2))
                            plt.xticks(rotation=45)
                    
                    plt.tight_layout()
                    
                    # Sauvegarder le graphique
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    chart_filename = f"{self.output_dir}/forecast_chart_spot_{spot_id}_{timestamp}.png"
                    plt.savefig(chart_filename, dpi=300, bbox_inches='tight')
                    plt.close()
                    
                    print(f"üìä Graphique sauvegard√©: {chart_filename}")
                    return chart_filename
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du graphique: {e}")
            return None
    
    def create_data_screenshot(self, data, spot_id):
        """Cr√©er une capture d'√©cran des donn√©es JSON"""
        try:
            # Cr√©er une image avec les donn√©es
            width = 1200
            height = 800
            
            img = Image.new('RGB', (width, height), color='white')
            draw = ImageDraw.Draw(img)
            
            # Essayer de charger une police
            try:
                font_large = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
                font_medium = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
                font_small = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 12)
            except:
                font_large = ImageFont.load_default()
                font_medium = ImageFont.load_default()
                font_small = ImageFont.load_default()
            
            # Titre
            title = f"Donn√©es de pr√©visions - Spot {spot_id} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            draw.text((20, 20), title, fill='black', font=font_large)
            
            # Ligne de s√©paration
            draw.line([(20, 60), (width-20, 60)], fill='gray', width=2)
            
            # Afficher les donn√©es JSON format√©es
            json_str = json.dumps(data, indent=2, ensure_ascii=False)
            
            # Diviser en lignes et afficher
            lines = json_str.split('\n')
            y_position = 80
            
            for i, line in enumerate(lines[:50]):  # Limiter √† 50 lignes
                if y_position > height - 50:
                    break
                
                # Couper les lignes trop longues
                if len(line) > 100:
                    line = line[:97] + "..."
                
                draw.text((20, y_position), line, fill='black', font=font_small)
                y_position += 18
            
            if len(lines) > 50:
                draw.text((20, y_position), "... (donn√©es tronqu√©es)", fill='gray', font=font_small)
            
            # Sauvegarder l'image
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            screenshot_filename = f"{self.output_dir}/forecast_data_spot_{spot_id}_{timestamp}.png"
            img.save(screenshot_filename)
            
            print(f"üì∏ Capture d'√©cran des donn√©es sauvegard√©e: {screenshot_filename}")
            return screenshot_filename
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation de la capture d'√©cran: {e}")
            return None
    
    def run_complete_test(self):
        """Ex√©cuter un test complet de l'API forecast"""
        print("üåä Test complet de l'API Forecast InnovSurf")
        print("=" * 60)
        
        # Authentification
        if not self.authenticate():
            print("‚ö†Ô∏è  Authentification √©chou√©e, tests sans authentification")
        
        # R√©cup√©rer la liste des spots
        spots = self.get_surf_spots()
        
        if not spots:
            print("‚ùå Aucun spot disponible pour les tests")
            return
        
        # Tester l'API forecast pour chaque spot
        test_results = []
        
        for spot in spots[:3]:  # Limiter √† 3 spots pour √©viter la surcharge
            spot_id = spot.get('id')
            spot_name = spot.get('name', f'Spot {spot_id}')
            
            print(f"\nüèÑ Test du spot: {spot_name} (ID: {spot_id})")
            
            # Test de l'endpoint forecast
            result = self.test_forecast_endpoint(spot_id)
            result['spot_id'] = spot_id
            result['spot_name'] = spot_name
            
            test_results.append(result)
            
            # Cr√©er des visualisations si les donn√©es sont disponibles
            if result['success'] and 'data' in result:
                # Cr√©er un graphique
                self.create_forecast_chart(result['data'], spot_id)
                
                # Cr√©er une capture d'√©cran des donn√©es
                self.create_data_screenshot(result['data'], spot_id)
            
            # Pause entre les tests
            time.sleep(1)
        
        # G√©n√©rer un rapport
        self.generate_test_report(test_results)
        
        return test_results
    
    def generate_test_report(self, test_results):
        """G√©n√©rer un rapport de test"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"{self.output_dir}/forecast_test_report_{timestamp}.md"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"# Rapport de Test de l'API Forecast\n\n")
            f.write(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            # R√©sum√©
            total_tests = len(test_results)
            successful_tests = sum(1 for r in test_results if r["success"])
            failed_tests = total_tests - successful_tests
            
            f.write(f"## R√©sum√©\n\n")
            f.write(f"- **Total des tests:** {total_tests}\n")
            f.write(f"- **Tests r√©ussis:** {successful_tests} ‚úÖ\n")
            f.write(f"- **Tests √©chou√©s:** {failed_tests} ‚ùå\n")
            f.write(f"- **Taux de succ√®s:** {(successful_tests/total_tests)*100:.1f}%\n\n")
            
            # D√©tails des tests
            f.write(f"## D√©tails des Tests\n\n")
            
            for result in test_results:
                status_icon = "‚úÖ" if result["success"] else "‚ùå"
                f.write(f"### {status_icon} {result['spot_name']} (ID: {result['spot_id']})\n\n")
                f.write(f"- **Statut:** {'Succ√®s' if result['success'] else '√âchec'}\n")
                f.write(f"- **Temps de r√©ponse:** {result['response_time']:.2f}s\n")
                f.write(f"- **Code de statut:** {result['status_code']}\n\n")
                
                if not result["success"] and "error" in result:
                    f.write(f"**Erreur:** {result['error']}\n\n")
                
                f.write("---\n\n")
        
        print(f"üìÑ Rapport g√©n√©r√© dans {report_file}")

def main():
    """Fonction principale"""
    print("üåä Testeur de l'API Forecast InnovSurf")
    print("=" * 50)
    
    # V√©rifier que le serveur est accessible
    try:
        response = requests.get("http://localhost:8000/api/", timeout=5)
        print("‚úÖ Serveur accessible")
    except:
        print("‚ùå Serveur non accessible")
        print("Assurez-vous que votre serveur Django est d√©marr√©")
        return
    
    # Cr√©er et ex√©cuter le testeur
    tester = ForecastAPITester()
    results = tester.run_complete_test()
    
    print("\nüéâ Tests termin√©s !")
    print(f"Consultez le dossier '{tester.output_dir}' pour les r√©sultats")

if __name__ == "__main__":
    main()

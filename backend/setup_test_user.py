#!/usr/bin/env python3
"""
Script de configuration d'un utilisateur de test pour les APIs InnovSurf
Cr√©e un utilisateur avec les bonnes permissions pour tester toutes les APIs
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'innovsurf.settings')
django.setup()

from AppWeb.models import CustomUser, SurfClub, Surfer, Monitor
from django.contrib.auth import authenticate
from django.db import transaction

def create_test_user():
    """Cr√©er un utilisateur de test avec toutes les permissions"""
    print("üîß Configuration de l'utilisateur de test...")
    
    try:
        # V√©rifier si l'utilisateur existe d√©j√†
        username = "testuser"
        email = "test@innovsurf.com"
        
        if CustomUser.objects.filter(email=email).exists():
            print(f"‚úÖ L'utilisateur {email} existe d√©j√†")
            user = CustomUser.objects.get(email=email)
        else:
            # Cr√©er l'utilisateur
            user = CustomUser.objects.create_user(
                email=email,
                password="testpass123",
                is_staff=True,
                is_superuser=True,
                is_surfer=True,
                is_surfclub=True
            )
            print(f"‚úÖ Utilisateur {email} cr√©√© avec succ√®s")
        
        # Cr√©er un profil de club de surf si n√©cessaire
        if not SurfClub.objects.filter(user=user).exists():
            # V√©rifier s'il y a des spots de surf disponibles
            from AppWeb.models import SurfSpot
            if SurfSpot.objects.exists():
                surf_spot = SurfSpot.objects.first()
                club = SurfClub.objects.create(
                    user=user,
                    name="Test Surf Club",
                    surf_spot=surf_spot
                )
                print(f"‚úÖ Club de surf cr√©√©: {club.name}")
            else:
                print("‚ö†Ô∏è  Aucun spot de surf disponible pour cr√©er le club")
        
        # Cr√©er un profil de surfeur si n√©cessaire
        if not Surfer.objects.filter(user=user).exists():
            from datetime import date
            surfer = Surfer.objects.create(
                user=user,
                firstname="Test",
                lastname="User",
                birthday=date(1990, 1, 1),
                level="intermediate"
            )
            print(f"‚úÖ Profil surfeur cr√©√© pour {user.email}")
        
        # Cr√©er un profil de moniteur si n√©cessaire
        if not Monitor.objects.filter(surf_club__user=user).exists():
            # R√©cup√©rer le club cr√©√©
            club = SurfClub.objects.get(user=user)
            from datetime import date
            monitor = Monitor.objects.create(
                first_name="Test",
                last_name="Monitor",
                birthday=date(1985, 1, 1),
                active=True,
                surf_club=club
            )
            print(f"‚úÖ Profil moniteur cr√©√© pour {user.email}")
        
        print("\nüéØ Utilisateur de test configur√© avec succ√®s !")
        print(f"   Email: {email}")
        print(f"   Password: testpass123")
        print(f"   Superuser: Oui")
        print(f"   Staff: Oui")
        print(f"   Surfer: Oui")
        print(f"   SurfClub: Oui")
        
        return email, "testpass123"
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur: {e}")
        return None, None

def test_authentication(username, password):
    """Tester l'authentification de l'utilisateur"""
    print(f"\nüîê Test d'authentification pour {username}...")
    
    try:
        # Test d'authentification Django
        user = authenticate(username=username, password=password)
        if user:
            print(f"‚úÖ Authentification Django r√©ussie")
            print(f"   User ID: {user.id}")
            print(f"   Is active: {user.is_active}")
            print(f"   Is staff: {user.is_staff}")
            print(f"   Is superuser: {user.is_superuser}")
        else:
            print(f"‚ùå Authentification Django √©chou√©e")
            return False
        
        # Test de l'API token
        import requests
        
        auth_url = "http://localhost:8000/api/token/"
        auth_data = {
            "email": username,  # username est en fait l'email
            "password": password
        }
        
        response = requests.post(auth_url, json=auth_data)
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get('access')
            refresh_token = token_data.get('refresh')
            
            print(f"‚úÖ Authentification API r√©ussie")
            print(f"   Access token: {access_token[:20]}...")
            print(f"   Refresh token: {refresh_token[:20]}...")
            
            # Test d'un endpoint prot√©g√©
            test_url = "http://localhost:8000/api/surf-club/profile/"
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            test_response = requests.get(test_url, headers=headers)
            print(f"   Test endpoint prot√©g√©: {test_response.status_code}")
            
            return True
        else:
            print(f"‚ùå Authentification API √©chou√©e: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'authentification: {e}")
        return False

def update_test_config(username, password):
    """Mettre √† jour la configuration des tests"""
    print(f"\nüìù Mise √† jour de la configuration des tests...")
    
    # Mettre √† jour api_screenshot_tool.py
    try:
        with open('api_screenshot_tool.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Remplacer les identifiants par d√©faut
        content = content.replace('username="admin"', f'username="{username}"')
        content = content.replace('password="admin"', f'password="{password}"')
        content = content.replace('username="testuser"', f'username="{username}"')
        content = content.replace('password="testpass123"', f'password="{password}"')
        
        with open('api_screenshot_tool.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ api_screenshot_tool.py mis √† jour")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de mettre √† jour api_screenshot_tool.py: {e}")
    
    # Mettre √† jour test_forecast_api.py
    try:
        with open('test_forecast_api.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        content = content.replace('username="admin"', f'username="{username}"')
        content = content.replace('password="admin"', f'password="{password}"')
        
        with open('test_forecast_api.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ test_forecast_api.py mis √† jour")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de mettre √† jour test_forecast_api.py: {e}")
    
    # Mettre √† jour smart_api_tester.py
    try:
        with open('smart_api_tester.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        content = content.replace('username="admin"', f'username="{username}"')
        content = content.replace('password="admin"', f'password="{password}"')
        
        with open('smart_api_tester.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ smart_api_tester.py mis √† jour")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de mettre √† jour smart_api_tester.py: {e}")

def main():
    """Fonction principale"""
    print("üîß Configuration de l'utilisateur de test InnovSurf")
    print("=" * 60)
    
    # V√©rifier que Django est accessible
    try:
        from django.conf import settings
        print("‚úÖ Configuration Django charg√©e")
    except Exception as e:
        print(f"‚ùå Erreur Django: {e}")
        print("Assurez-vous d'√™tre dans le bon r√©pertoire")
        return
    
    # Cr√©er l'utilisateur de test
    username, password = create_test_user()
    
    if not username or not password:
        print("‚ùå Impossible de cr√©er l'utilisateur de test")
        return
    
    # Tester l'authentification
    if test_authentication(username, password):
        # Mettre √† jour la configuration des tests
        update_test_config(username, password)
        
        print("\nüéâ Configuration termin√©e avec succ√®s !")
        print("\nüìã Prochaines √©tapes:")
        print("1. Relancez vos tests d'API")
        print("2. Tous les endpoints prot√©g√©s devraient maintenant fonctionner")
        print("3. Utilisez: python3 smart_api_tester.py")
        
        print(f"\nüîë Identifiants de test:")
        print(f"   Username: {username}")
        print(f"   Password: {password}")
        
    else:
        print("\n‚ùå Configuration √©chou√©e")
        print("V√©rifiez que votre serveur Django fonctionne")

if __name__ == "__main__":
    main()
